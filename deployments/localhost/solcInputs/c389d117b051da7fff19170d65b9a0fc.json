{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\n\nimport \"./PriceConverter.sol\";\n//769,283\n//748,041 - constant\n//738,687 - immutable\n//713,552 - error - not owner\n//674,796 - error 2\n\n\nerror FundMe__NotOwner();\nerror FundMe__InsufficientBalance(uint256 available, uint256 required);\nerror FundMe__SendingFailed();\n\ncontract FundMe {\n\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 15 * 1e18;\n    address[] public funders;\n    mapping (address => uint256) public addressToAmoutFunded;\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n\n    modifier onlyOwner() {\n        if(msg.sender != i_owner)\n            revert FundMe__NotOwner();\n        _;\n    }\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // if someone send money without calling the fund method using the contract address\n    receive() external payable { fund(); }\n    fallback() external payable { fund(); }\n\n    function fund() public payable {\n        // require(msg.value.getConversionRate() >= MINIMUM_USD, \"Did not send enough money\");\n        if(msg.value.getConversionRate(priceFeed) < MINIMUM_USD)\n            revert FundMe__InsufficientBalance({\n                available: msg.value.getConversionRate(priceFeed),\n                required: MINIMUM_USD\n            });\n \n        funders.push(msg.sender);\n        addressToAmoutFunded[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        //reset addressTofunderIndex\n        for(uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmoutFunded[funder] = 0;\n        }\n\n        //reset funder\n        funders = new address[](0);\n        \n        // //withdraw ways:\n        // //1. transfer\n        //     //msg.sender = address\n        //     //payyable(msg.sender) = payable address \n        // payable(msg.sender).transfer(address(this).balance); //throw error when faild 2.3k gas\n        // //2. send\n        // bool successSend = payable(msg.sender).send(address(this).balance); //2.3 gas; return bool\n        // require(successSend, \"Send Faild!\");\n        //3. call\n        (bool successCall,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        // require(successCall, \"Send Failed!\");\n        if(!successCall) revert FundMe__SendingFailed();\n    }\n\n    function getPriceFeed() public view  returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n}\n\n/*\n*  Notes:\n-   use  constant when you set the value at init\n    use immutable when you send the value in the s2nd init and it will never change later\n    - msg.sender avalable only inside a function.\n*/"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n// import \"./AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    /**\n    * Network: Sepolia\n    * Data Feed: ETH/USD\n    * Address: 0x694AA1769357215DE4FAC081bf1f309aDC325306\n    */\n\n    // function getDecimals() internal view returns (uint8) {\n    //     AggregatorV3Interface dataFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n    //     return dataFeed.decimals();\n    // }\n\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // AggregatorV3Interface dataFeed = AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306);\n        (, int256 price,,,) = priceFeed.latestRoundData();\n        //since it have 8 decimal we add 10 to be 18 like msg.value\n        return uint256(price) * 10**10;\n    }\n\n    function getConversionRate(uint256 ethAmout, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        // uint256 ethPrice = getPrice();\n        return (getPrice(priceFeed) * ethAmout) / 1e18;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}